//`timescale 1ns / 1ps
//module servo_control (
//    input CLK100MHZ,             // 100 MHz clock input from Basys3
//    input btnL,                  // Left button to set servo to 0 degrees
//    input btnR,                  // Right button to set servo to 180 degrees
//    output reg pwm_signal,       // PWM output signal to SG90 servo
//    output [7:0] current_position // Expose current_position for top module
//);

//    // Clock enable generation: 1 us period (100 cycles at 100 MHz)
//    reg [6:0] ce_counter = 0;
//    reg clock_enable;
//    always @(posedge CLK100MHZ) begin
//        if (ce_counter == 99) begin
//            ce_counter <= 0;
//            clock_enable <= 1;
//        end else begin
//            ce_counter <= ce_counter + 1;
//            clock_enable <= 0;
//        end
//    end

//    // Debouncing for btnL: 10 ms debounce time
//    reg [13:0] debounce_counter_L = 0;
//    reg debounced_btnL = 0;
//    reg prev_debounced_btnL = 0;
//    always @(posedge CLK100MHZ) begin
//        if (clock_enable) begin
//            if (btnL == 1 && debounce_counter_L < 10000)
//                debounce_counter_L <= debounce_counter_L + 1;
//            else if (btnL == 0)
//                debounce_counter_L <= 0;
//            debounced_btnL <= (debounce_counter_L >= 10000);
//            prev_debounced_btnL <= debounced_btnL;
//        end
//    end

//    // Debouncing for btnR: 10 ms debounce time
//    reg [13:0] debounce_counter_R = 0;
//    reg debounced_btnR = 0;
//    reg prev_debounced_btnR = 0;
//    always @(posedge CLK100MHZ) begin
//        if (clock_enable) begin
//            if (btnR == 1 && debounce_counter_R < 10000)
//                debounce_counter_R <= debounce_counter_R + 1;
//            else if (btnR == 0)
//                debounce_counter_R <= 0;
//            debounced_btnR <= (debounce_counter_R >= 10000);
//            prev_debounced_btnR <= debounced_btnR;
//        end
//    end

//    // Target position logic: Set target based on button presses
//    reg [7:0] target_position = 0;
//    always @(posedge CLK100MHZ) begin
//        if (clock_enable) begin
//            if (debounced_btnL == 1 && prev_debounced_btnL == 0)
//                target_position <= 0;
//            else if (debounced_btnR == 1 && prev_debounced_btnR == 0)
//                target_position <= 180;
//        end
//    end

//    // Position update logic: Move 1 degree every 5 ms towards target
//    reg [12:0] update_counter = 0;
//    reg [7:0] current_position_reg = 0;
//    always @(posedge CLK100MHZ) begin
//        if (clock_enable) begin
//            if (update_counter < 4999)
//                update_counter <= update_counter + 1;
//            else
//                update_counter <= 0;
//            if (update_counter == 4999) begin
//                if (current_position_reg < target_position)
//                    current_position_reg <= current_position_reg + 1;
//                else if (current_position_reg > target_position)
//                    current_position_reg <= current_position_reg - 1;
//            end
//        end
//    end

//    // Assign current_position_reg to the output
//    assign current_position = current_position_reg;

//    // PWM generation: 20 ms period, pulse width 1 ms to 2.1 ms
//    reg [14:0] pwm_counter = 0;
//    reg [15:0] intermediate_pulse;
//    reg [15:0] current_pulse_width;
//    always @(posedge CLK100MHZ) begin
//        if (clock_enable) begin
//            if (pwm_counter == 0)
//                intermediate_pulse <= 1000 + (current_position_reg * 1100) / 180; // Adjusted to 1000-2100 µs for 0-180 degrees
//            current_pulse_width <= intermediate_pulse;
//            if (pwm_counter < 19999)
//                pwm_counter <= pwm_counter + 1;
//            else
//                pwm_counter <= 0;
//            pwm_signal <= (pwm_counter < current_pulse_width);
//        end
//    end

//endmodule


`timescale 1ns / 1ps
module servo_control (
    input CLK100MHZ,             // 100 MHz clock input from Basys3
    input btnL,                  // Left button to set servo to 0 degrees
    input btnR,                  // Right button to set servo to 180 degrees
    output reg pwm_signal,       // PWM output signal to MG995 servo (e.g., J3 pin 1)
    output [7:0] current_position // Expose current_position for top module
);

    // Clock enable generation: 1 µs period (100 cycles at 100 MHz)
    reg [6:0] ce_counter = 0;
    reg clock_enable;
    always @(posedge CLK100MHZ) begin
        if (ce_counter == 99) begin
            ce_counter <= 0;
            clock_enable <= 1;
        end else begin
            ce_counter <= ce_counter + 1;
            clock_enable <= 0;
        end
    end

    // Debouncing for btnL: 10 ms debounce time
    reg [13:0] debounce_counter_L = 0;
    reg debounced_btnL = 0;
    reg prev_debounced_btnL = 0;
    always @(posedge CLK100MHZ) begin
        if (clock_enable) begin
            if (btnL == 1 && debounce_counter_L < 10000)
                debounce_counter_L <= debounce_counter_L + 1;
            else if (btnL == 0)
                debounce_counter_L <= 0;
            debounced_btnL <= (debounce_counter_L >= 10000);
            prev_debounced_btnL <= debounced_btnL;
        end
    end

    // Debouncing for btnR: 10 ms debounce time
    reg [13:0] debounce_counter_R = 0;
    reg debounced_btnR = 0;
    reg prev_debounced_btnR = 0;
    always @(posedge CLK100MHZ) begin
        if (clock_enable) begin
            if (btnR == 1 && debounce_counter_R < 10000)
                debounce_counter_R <= debounce_counter_R + 1;
            else if (btnR == 0)
                debounce_counter_R <= 0;
            debounced_btnR <= (debounce_counter_R >= 10000);
            prev_debounced_btnR <= debounced_btnR;
        end
    end

    // Target position logic: Set target based on button presses
    reg [7:0] target_position = 0;
    always @(posedge CLK100MHZ) begin
        if (clock_enable) begin
            if (debounced_btnL == 1 && prev_debounced_btnL == 0)
                target_position <= 0;   // Set to 0 degrees
            else if (debounced_btnR == 1 && prev_debounced_btnR == 0)
                target_position <= 180; // Set to 180 degrees
        end
    end

    // Position update logic: Move 1 degree every 8 ms (slower for MG995)
    reg [13:0] update_counter = 0; // Increased to 14 bits for 7999
    reg [7:0] current_position_reg = 0;
    always @(posedge CLK100MHZ) begin
        if (clock_enable) begin
            if (update_counter < 7999) // 8 ms = 8000 µs
                update_counter <= update_counter + 1;
            else
                update_counter <= 0;
            if (update_counter == 7999) begin
                if (current_position_reg < target_position)
                    current_position_reg <= current_position_reg + 1;
                else if (current_position_reg > target_position)
                    current_position_reg <= current_position_reg - 1;
            end
        end
    end

    // Assign current_position_reg to the output
    assign current_position = current_position_reg;

    // PWM generation: 20 ms period, adjustable pulse width
    reg [14:0] pwm_counter = 0;
    reg [15:0] current_pulse_width;
    // Adjustable min/max pulse widths (in µs)
    parameter MIN_PULSE = 900;  // Slightly below 1 ms for flexibility
    parameter MAX_PULSE = 2100; // Slightly above 2 ms for flexibility
    always @(posedge CLK100MHZ) begin
        if (clock_enable) begin
            if (pwm_counter == 0)
                current_pulse_width <= MIN_PULSE + (current_position_reg * (MAX_PULSE - MIN_PULSE)) / 180;
            if (pwm_counter < 19999)
                pwm_counter <= pwm_counter + 1;
            else
                pwm_counter <= 0;
            pwm_signal <= (pwm_counter < current_pulse_width);
        end
    end

endmodule
