`timescale 1ns / 1ps

module top (
    input CLK100MHZ,             // 100 MHz clock from Basys 3
    input btnL,                  // Left button (e.g., T17) for 0°
    input btnR,                  // Right button (e.g., U18) for 180°
    output servo_pwm,            // PWM output to MG995 (e.g., J3 pin 1, G19)
    output [7:0] servo_pos_binary // Optional: 8-bit position output (0-180)
);

    // Clock divider for 1 µs ticks (100 MHz -> 1 MHz)
    reg [6:0] clk_div = 0;
    reg clk_1us = 0;
    always @(posedge CLK100MHZ) begin
        if (clk_div == 49) begin // 100 MHz / 50 = 2 MHz, but 100 cycles = 1 µs
            clk_div <= 0;
            clk_1us <= ~clk_1us; // Toggle every 50 cycles, 1 µs period
        end else
            clk_div <= clk_div + 1;
    end

    // Simple button control (no debouncing for simplicity; add if needed)
    reg [7:0] target_position = 90; // Start at 90°
    always @(posedge CLK100MHZ) begin
        if (btnL && !btnR)
            target_position <= 0;   // Left button sets 0°
        else if (btnR && !btnL)
            target_position <= 180; // Right button sets 180°
    end

    // Position update: Move toward target at ~10 ms/degree
    reg [19:0] update_counter = 0;
    reg [7:0] current_position = 90; // Start at 90°
    always @(posedge clk_1us) begin
        if (update_counter < 9999) // 10 ms = 10,000 µs
            update_counter <= update_counter + 1;
        else begin
            update_counter <= 0;
            if (current_position < target_position)
                current_position <= current_position + 1;
            else if (current_position > target_position)
                current_position <= current_position - 1;
        end
    end

    // PWM generation: 20 ms period, 1-2 ms pulse
    reg [20:0] pwm_counter = 0;
    reg pwm_signal = 0;
    reg [20:0] pulse_width;
    always @(posedge clk_1us) begin
        if (pwm_counter == 0)
            pulse_width <= 1000 + (current_position * 1000) / 180; // 1000-2000 µs
        if (pwm_counter < 19999) // 20 ms = 20,000 µs
            pwm_counter <= pwm_counter + 1;
        else
            pwm_counter <= 0;
        pwm_signal <= (pwm_counter < pulse_width);
    end

    // Output assignments
    assign servo_pwm = pwm_signal;
    assign servo_pos_binary = current_position;

endmodule
